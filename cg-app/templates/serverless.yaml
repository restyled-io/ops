Parameters:
  Environment:
    Type: String
  FunctionName:
    Type: String
  FunctionSourceKey:
    Type: String

  FunctionSourceBucket:
    Type: String
    Default: infra.restyled.io
  FunctionRuntime:
    Type: String
    Default: python3.8
  FunctionHandler:
    Type: String
    Default: main.handler
  FunctionTimeout:
    Type: Number
    Default: 30
  FunctionRole:
    Type: String
    Default: "lambda-execution"

  LogInvocation:
    Type: String
    AllowedValues: ["True", "False"]
    Default: "False"
  ScheduleExpression:
    Type: String
    Default: ""

  Version:
    Type: Number
    Default: 0

Outputs:
  Version:
    Description: "Template version"
    Value: !Ref Version

Conditions:
  HasLogInvocation: !Equals [!Ref LogInvocation, "True"]
  HasScheduleExpression: !Not [!Equals [!Ref ScheduleExpression, ""]]

Resources:
  LambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "restyled-${Environment}-${FunctionName}"
      Runtime: !Ref FunctionRuntime
      Code:
        S3Bucket: !Ref FunctionSourceBucket
        S3Key: !Ref FunctionSourceKey
      Handler: !Ref FunctionHandler
      Timeout: !Ref FunctionTimeout
      Environment:
        Variables:
          ENV: !Ref Environment
      Role: !Sub "arn:aws:iam::${AWS::AccountId}:role/restyled-${Environment}-${FunctionRole}"

  LambdaScheduleRule:
    Condition: HasScheduleExpression
    Type: AWS::Events::Rule
    Properties:
      Description: !Sub "Trigger restyled-${Environment}-${FunctionName}"
      ScheduleExpression: !Ref ScheduleExpression
      State: "ENABLED"
      Targets:
        - Id: !Sub "restyled-${Environment}-${FunctionName}"
          Arn: !GetAtt LambdaFunction.Arn

  LambdaInvokePermission:
    Condition: HasLogInvocation
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref LambdaFunction
      Principal: !Sub "logs.${AWS::Region}.amazonaws.com"
      SourceAccount: !Ref AWS::AccountId
      SourceArn: !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:*:*"

  LambdaSchedulePermission:
    Condition: HasScheduleExpression
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref LambdaFunction
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt LambdaScheduleRule.Arn
