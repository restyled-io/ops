Parameters:
  Environment:
    Type: String

  Name:
    Type: String

  InstanceType:
    Type: String

  UserDataSourceKey:
    Type: String

  DesiredCapacity:
    Type: Number

  ScaleUpMetric:
    Type: String

  ScaleUpThreshold:
    Type: Number

  ScaleUpCapacity:
    Type: Number

  InstanceAmi:
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/ecs/optimized-ami/amazon-linux-2/recommended/image_id

  InstanceKeyPair:
    Type: String
    Default: patrick@leo

  DatadogAgentMajorVersion:
    Type: String
    Default: '7'

  DatadogApiKey:
    Type: 'AWS::SSM::Parameter::Value<String>'
    NoEcho: true

  DatadogSite:
    Type: String
    Default: 'datadoghq.com'

Outputs:
  DashboardUrl:
    Value: !Sub "https://console.aws.amazon.com/cloudwatch/home?region=${AWS::Region}#dashboards:name=${Dashboard}"

Resources:
  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Sub "${Environment}-${Name} Security Group"
      VpcId:
        Fn::ImportValue: !Sub "${Environment}-VPCId"
      SecurityGroupIngress:
        # Docker TLS
        - CidrIp: 0.0.0.0/0
          IpProtocol: tcp
          FromPort: 2376
          ToPort: 2376

        # SSH
        - CidrIp: 0.0.0.0/0
          IpProtocol: tcp
          FromPort: 22
          ToPort: 22

      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          IpProtocol: "-1"
          FromPort: -1
          ToPort: -1

  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "restyled/${Environment}/${Name}"
      RetentionInDays: 7

  LogGroupSubscription:
    Type: AWS::Logs::SubscriptionFilter
    Properties:
        DestinationArn: !Sub "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:restyled-forward-logs"
        LogGroupName: !Ref LogGroup
        FilterPattern: ""

  LaunchConfiguration:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId: !Ref InstanceAmi
      IamInstanceProfile: restyled-ec2-instance
      KeyName: !Ref InstanceKeyPair
      AssociatePublicIpAddress: true
      SecurityGroups:
        - !Ref SecurityGroup
      InstanceMonitoring: true
      InstanceType: !Ref InstanceType
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          exec > >(tee /var/log/user-data.log|logger -t user-data -s 2>/dev/console) 2>&1
          set -eu

          echo "Installing tooling required for setup"
          sudo yum install -y awscli jq

          echo "Pulling user-data from ${UserDataSourceKey}..."
          aws s3 cp "s3://infra.restyled.io/${UserDataSourceKey}" ./user-data
          chmod +x ./user-data

          export ENV=${Environment}
          export LIFECYCLE_HOOKS_URL=${LifecycleHooksQueue}
          export LOG_GROUP=${LogGroup}
          export REGION=${AWS::Region}

          export DD_AGENT_MAJOR_VERSION=${DatadogAgentMajorVersion}
          export DD_API_KEY=${DatadogApiKey}
          export DD_SITE=${DatadogSite}

          echo "Executing user-data"
          ./user-data

  AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
        LaunchConfigurationName: !Ref LaunchConfiguration
        VPCZoneIdentifier: !Split
          - ","
          - Fn::ImportValue: !Sub "${Environment}-SubnetIds"
        MinSize: !Sub "${DesiredCapacity}"
        MaxSize: !Sub "${ScaleUpCapacity}"
        DesiredCapacity: !Ref DesiredCapacity
        MetricsCollection:
          - Granularity: 1Minute
        LifecycleHookSpecificationList:
          - LifecycleHookName: !Sub "restyled-${Environment}-${Name}-launching"
            LifecycleTransition: autoscaling:EC2_INSTANCE_LAUNCHING
            NotificationTargetARN: !GetAtt LifecycleHooksQueue.Arn
            RoleARN: !Sub "arn:aws:iam::${AWS::AccountId}:role/restyled-ec2-autoscaling"
          - LifecycleHookName: !Sub "restyled-${Environment}-${Name}-terminating"
            LifecycleTransition: autoscaling:EC2_INSTANCE_TERMINATING
            NotificationTargetARN: !GetAtt LifecycleHooksQueue.Arn
            RoleARN: !Sub "arn:aws:iam::${AWS::AccountId}:role/restyled-ec2-autoscaling"

  LifecycleHooksQueue:
    Type: AWS::SQS::Queue
    Properties: {}

  ScaleUpPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ExactCapacity
      AutoScalingGroupName: !Ref AutoScalingGroup
      PolicyType: SimpleScaling
      ScalingAdjustment: !Ref ScaleUpCapacity

  ScaleUpAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmActions:
        - !Ref ScaleUpPolicy
      AlarmDescription: !Sub "Scale up restyled-${Environment}-${Name}"
      ComparisonOperator: GreaterThanOrEqualToThreshold
      DatapointsToAlarm: 1
      Dimensions:
        - Name: Environment
          Value: !Ref Environment
      EvaluationPeriods: 1
      MetricName: !Ref ScaleUpMetric
      Namespace: Restyled
      Period: 60
      Statistic: Minimum
      Threshold: !Ref ScaleUpThreshold
      Unit: Count

  ScaleDownPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ExactCapacity
      AutoScalingGroupName: !Ref AutoScalingGroup
      PolicyType: SimpleScaling
      ScalingAdjustment: 1

  ScaleDownAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmActions:
        - !Ref ScaleDownPolicy
      AlarmDescription: !Sub "Scale down restyled-${Environment}-${Name}"
      ComparisonOperator: LessThanOrEqualToThreshold
      DatapointsToAlarm: 1
      Dimensions:
        - Name: Environment
          Value: !Ref Environment
      EvaluationPeriods: 1
      MetricName: !Ref ScaleUpMetric
      Namespace: Restyled
      Period: 60
      Statistic: Maximum
      Threshold: 0
      Unit: Count

  Dashboard:
    Type: AWS::CloudWatch::Dashboard
    Properties:
      DashboardName: !Sub "restyled-${Environment}-${Name}"
      DashboardBody: !Sub |
        {
          "widgets": [
            {
              "height": 9,
              "width": 12,
              "y": 0,
              "x": 0,
              "type": "metric",
              "properties": {
                "metrics": [
                  [
                    "AWS/AutoScaling",
                    "GroupTerminatingInstances",
                    "AutoScalingGroupName",
                    "${AutoScalingGroup}",
                    {
                      "color": "#ff7f0e"
                    }
                  ],
                  [
                    ".",
                    "GroupInServiceInstances",
                    ".",
                    ".",
                    {
                      "color": "#c7c7c7"
                    }
                  ],
                  [
                    ".",
                    "GroupPendingInstances",
                    ".",
                    ".",
                    {
                      "color": "#bcbd22"
                    }
                  ]
                ],
                "view": "timeSeries",
                "stacked": true,
                "region": "${AWS::Region}",
                "stat": "Maximum",
                "period": 60,
                "title": "Instances",
                "annotations": {
                  "horizontal": [
                    {
                      "color": "#c7c7c7",
                      "label": "ScaledUp",
                      "value": ${ScaleUpCapacity}
                    },
                    {
                      "color": "#c7c7c7",
                      "label": "ScaledDown",
                      "value": ${DesiredCapacity}
                    }
                  ]
                }
              }
            },
            {
              "height": 12,
              "width": 12,
              "y": 18,
              "x": 0,
              "type": "log",
              "properties": {
                "query": "SOURCE '${LogGroup}' | fields @timestamp, @message\n| sort @timestamp desc",
                "region": "${AWS::Region}",
                "stacked": false,
                "title": "Logs",
                "view": "table"
              }
            }
          ]
        }
